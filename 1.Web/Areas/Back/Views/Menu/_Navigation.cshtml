@model Web.Areas.Back.Models.MenuViewModel

<nav class="sidebar" data-sidebar-anyclick-close="">
    <!-- START sidebar nav-->
    <ul class="sidebar-nav">
        <!-- START user info-->
        <li class="has-user-block">
            <div class="collapse" id="user-block">
                <div class="item user-block">
                    <!-- User picture-->
                    <div class="user-block-picture">
                        <div class="user-block-status">
                            <img class="img-thumbnail rounded-circle" src="~/img/user/02.jpg" alt="Avatar" width="60" height="60">
                            <div class="circle bg-success circle-lg"></div>
                        </div>
                    </div>
                    <!-- Name and Job-->
                    <div class="user-block-info">
                        <span class="user-block-name">Hello, Mike</span>
                        <span class="user-block-role">Designer</span>
                    </div>
                </div>
            </div>
        </li>
        <!-- END user info-->
        <!--Meun選單-->
        <li class="nav-heading ">
            <span data-localize="sidebar.heading.HEADER">功能選單</span>
        </li>
        @foreach (var parentMenu in Model.Menus.Where(x => x.ParentId == -1).OrderBy(x=>x.Sort))
        {
            <li class=" ">
                <a href="#@parentMenu.Name" title="@parentMenu.Name" data-toggle="collapse" class="collapsed" aria-expanded="false">
                    <em class="@parentMenu.Icon"></em>
                    <span>@parentMenu.Name</span>
                </a>
                <ul class="sidebar-nav sidebar-subnav collapse" id="@parentMenu.Name" style="">
                    @foreach (var childMenu in Model.Menus.Where(x => x.ParentId == parentMenu.Id).OrderBy(x => x.Sort))
                    {
                        <li class=" ">
                            <a href="@Url.Action(childMenu.Action, childMenu.Controller, new { area = childMenu.Area })" title="@childMenu.Name">
                                <span>@childMenu.Name</span>
                            </a>
                        </li>
                    }
                </ul>
            </li>
        }
    </ul>
    <!-- END sidebar nav-->
</nav>

<script>
    (function (window, document, $, undefined) {
        'use strict';

        $(initSidebar);


        var $win;
        var $html;
        var $body;
        var $sidebar;

        function initSidebar() {

            $win = $(window);
            $html = $('html');
            $body = $('body');
            $sidebar = $('.sidebar');

            // AUTOCOLLAPSE ITEMS
            // -----------------------------------

            var sidebarCollapse = $sidebar.find('.collapse');
            sidebarCollapse.on('show.bs.collapse', function (event) {

                event.stopPropagation();
                if ($(this).parents('.collapse').length === 0)
                    sidebarCollapse.filter('.show').collapse('hide');

            });

            // SIDEBAR ACTIVE STATE
            // -----------------------------------

            // Find current active item
            var currentItem = $('.sidebar .active').parents('li');

            // hover mode don't try to expand active collapse
            if (!useAsideHover())
                currentItem
                    .addClass('active') // activate the parent
                    .children('.collapse') // find the collapse
                    .collapse('show'); // and show it

            // remove this if you use only collapsible sidebar items
            $sidebar.find('li > a + ul').on('show.bs.collapse', function (e) {
                if (useAsideHover()) e.preventDefault();
            });

            // SIDEBAR COLLAPSED ITEM HANDLER
            // -----------------------------------


            var eventName = isTouch() ? 'click' : 'mouseenter';
            var subNav = $();
            $sidebar.on(eventName, '.sidebar-nav > li', function () {

                if (isSidebarCollapsed() || useAsideHover()) {

                    subNav.trigger('mouseleave');
                    subNav = toggleMenuItem($(this));

                    // Used to detect click and touch events outside the sidebar
                    sidebarAddBackdrop();
                }

            });

            var sidebarAnyclickClose = $sidebar.data('sidebarAnyclickClose');

            // Allows to close
            if (typeof sidebarAnyclickClose !== 'undefined') {

                $('.wrapper').on('click.sidebar', function (e) {
                    // don't check if sidebar not visible
                    if (!$body.hasClass('aside-toggled')) return;

                    var $target = $(e.target);
                    if (!$target.parents('.aside-container').length && // if not child of sidebar
                        !$target.is('#user-block-toggle') && // user block toggle anchor
                        !$target.parent().is('#user-block-toggle') // user block toggle icon
                    ) {
                        $body.removeClass('aside-toggled');
                    }

                });
            }
        }

        function sidebarAddBackdrop() {
            var $backdrop = $('<div/>', { 'class': 'dropdown-backdrop' });
            $backdrop.insertAfter('.aside-container').on("click mouseenter", function () {
                removeFloatingNav();
            });
        }

        // Open the collapse sidebar submenu items when on touch devices
        // - desktop only opens on hover
        function toggleTouchItem($element) {
            $element
                .siblings('li')
                .removeClass('open')
                .end()
                .toggleClass('open');
        }

        // Handles hover to open items under collapsed menu
        // -----------------------------------
        function toggleMenuItem($listItem) {

            removeFloatingNav();

            var ul = $listItem.children('ul');

            if (!ul.length) return $();
            if ($listItem.hasClass('open')) {
                toggleTouchItem($listItem);
                return $();
            }

            var $aside = $('.aside-container');
            var $asideInner = $('.aside-inner'); // for top offset calculation
            // float aside uses extra padding on aside
            var mar = parseInt($asideInner.css('padding-top'), 0) + parseInt($aside.css('padding-top'), 0);

            var subNav = ul.clone().appendTo($aside);

            toggleTouchItem($listItem);

            var itemTop = ($listItem.position().top + mar) - $sidebar.scrollTop();
            var vwHeight = $win.height();

            subNav
                .addClass('nav-floating')
                .css({
                    position: isFixed() ? 'fixed' : 'absolute',
                    top: itemTop,
                    bottom: (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
                });

            subNav.on('mouseleave', function () {
                toggleTouchItem($listItem);
                subNav.remove();
            });

            return subNav;
        }

        function removeFloatingNav() {
            $('.sidebar-subnav.nav-floating').remove();
            $('.dropdown-backdrop').remove();
            $('.sidebar li.open').removeClass('open');
        }

        function isTouch() {
            return $html.hasClass('touch');
        }

        function isSidebarCollapsed() {
            return $body.hasClass('aside-collapsed') || $body.hasClass('aside-collapsed-text');
        }

        function isSidebarToggled() {
            return $body.hasClass('aside-toggled');
        }

        function isMobile() {
            return $win.width() < APP_MEDIAQUERY.tablet;
        }

        function isFixed() {
            return $body.hasClass('layout-fixed');
        }

        function useAsideHover() {
            return $body.hasClass('aside-hover');
        }

    })(window, document, window.jQuery);
// SLIMSCROLL
// -----------------------------------
</script>